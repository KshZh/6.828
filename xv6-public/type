// not stored on disk: ip->ref and ip->valid.
//   is free if ip->ref is zero. Otherwise ip->ref tracks
//   cache entry is only correct when ip->valid is 1.
//   the disk and sets ip->valid, while iput() clears
//   ip->valid if ip->ref has fallen to zero.
//   ... examine and modify ip->xxx ...
// pathname lookup. iget() increments ip->ref so that the inode
// entries. Since ip->ref indicates whether an entry is free,
// and ip->dev and ip->inum indicate which i-node an entry
// An ip->lock sleep-lock protects all ip-> fields other than ref,
// dev, and inum.  One must hold ip->lock in order to
// read or write that inode's ip->valid, ip->size, ip->type, &c.
    if(dip->type == 0){  // a free inode
      dip->type = type;
// Must be called after every change to an ip->xxx field
// Caller must hold ip->lock.
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
  dip = (struct dinode*)bp->data + ip->inum%IPB;
  dip->type = ip->type;
  dip->major = ip->major;
  dip->minor = ip->minor;
  dip->nlink = ip->nlink;
  dip->size = ip->size;
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
      ip->ref++;
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
  ip->dev = dev;
  ip->inum = inum;
  ip->ref = 1;
  ip->valid = 0; // 暂时还未拷贝进来。
  ip->ref++;
  if(ip == 0 || ip->ref < 1)
  acquiresleep(&ip->lock);
  if(ip->valid == 0){
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
    dip = (struct dinode*)bp->data + ip->inum%IPB;
    ip->type = dip->type;
    ip->major = dip->major;
    ip->minor = dip->minor;
    ip->nlink = dip->nlink;
    ip->size = dip->size;
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs)); // 拷贝数组。
    ip->valid = 1;
    if(ip->type == 0)
  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
  releasesleep(&ip->lock);
  // iput在iunlock之后调用，所以iput要自己获取ip->lock。
  acquiresleep(&ip->lock);
  if(ip->valid && ip->nlink == 0){
    int r = ip->ref;
      ip->type = 0; // inode的type为0，标识这个dinode是free的，可被ialloc用于分配。
      ip->valid = 0; // ip->valid是内存中的inode附加的信息，不必写回磁盘。
  releasesleep(&ip->lock);
  ip->ref--;
// are listed in ip->addrs[].  The next NINDIRECT blocks are
// listed in block ip->addrs[NDIRECT].
    if((addr = ip->addrs[bn]) == 0)
      ip->addrs[bn] = addr = balloc(ip->dev);
    if((addr = ip->addrs[NDIRECT]) == 0)
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
    bp = bread(ip->dev, addr);
      a[bn] = addr = balloc(ip->dev);
    if(ip->addrs[i]){
      bfree(ip->dev, ip->addrs[i]);
      ip->addrs[i] = 0;
  if(ip->addrs[NDIRECT]){
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
        bfree(ip->dev, a[j]);
    bfree(ip->dev, ip->addrs[NDIRECT]);
    ip->addrs[NDIRECT] = 0;
  ip->size = 0;
// Caller must hold ip->lock.
  st->dev = ip->dev;
  st->ino = ip->inum;
  st->type = ip->type;
  st->nlink = ip->nlink;
  st->size = ip->size;
// Caller must hold ip->lock.
  if(ip->type == T_DEV){
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
    return devsw[ip->major].read(ip, dst, n);
  if(off > ip->size || off + n < off)
  if(off + n > ip->size)
    n = ip->size - off;
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
// Caller must hold ip->lock.
  if(ip->type == T_DEV){
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
    return devsw[ip->major].write(ip, src, n);
  if(off > ip->size || off + n < off)
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
  if(n > 0 && off > ip->size){
    ip->size = off;
    if(ip->type != T_DIR){
